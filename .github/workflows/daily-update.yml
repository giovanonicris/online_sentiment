name: Daily Data Update with Refresh Log

on:
  schedule:
    - cron: '0 7 * * *'  # runs at 3am
  workflow_dispatch:
    inputs:
      run_job:
        description: 'Which job to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - enterprise
          - emerging

jobs:
  update-and-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install lxml[html_clean]
      
      - name: Run Enterprise Risk News script
        if: ${{ github.event.inputs.run_job == 'all' || github.event.inputs.run_job == 'enterprise' || github.event.inputs.run_job == '' }}
        run: python EnterpriseRiskNews.py
      
      - name: Run Emerging Risk News script
        if: ${{ github.event.inputs.run_job == 'all' || github.event.inputs.run_job == 'emerging' || github.event.inputs.run_job == '' }}
        run: python EmergingRiskNews.py
      
      - name: Debug filesystem
        run: |
          echo "****FILESYSTEM DEBUG ******"
          pwd
          echo "repo root contains: "
          ls -la
          echo "output directory contains:"
          ls -la output/ || echo "output/ directory does not exist"
          echo "ALL CSVS in repo:"
          find . -name "*.csv" -type f
          echo "*******************************"
      
      - name: Commit CSVs
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git pull
          
          # Check if there are any changes
          if git diff --quiet HEAD -- output/*.csv; then
            echo "no changes detected in the CSV files"
          else
            echo "changes detected, committing..."
            git add output/*.csv
            git commit -m "Update Enterprise and Emerging Risk CSVs - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
          fi
